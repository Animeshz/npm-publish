/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package lt.petuska.kpm.publish

import io.kotest.core.spec.style.WordSpec
import io.kotest.core.spec.style.scopes.WordSpecTerminalScope
import io.kotest.matchers.string.shouldContainIgnoringCase
import io.kotest.matchers.string.shouldNotContainIgnoringCase
import lt.petuska.kpm.publish.util.assembleTaskName
import lt.petuska.kpm.publish.util.buildGradleFile
import lt.petuska.kpm.publish.util.gradleExec
import lt.petuska.kpm.publish.util.kpmPublishStub
import lt.petuska.kpm.publish.util.publishTaskName
import org.gradle.testkit.runner.BuildResult
import java.io.File

private suspend fun WordSpecTerminalScope.taskCreationTest(
  kotlinPlugin: String,
  jsTargets: List<String> = listOf(),
  jvmTargets: List<String> = listOf(),
  repositories: List<String> = listOf("npmjs"),
  expectedMissingTasks: List<String> = listOf()
) {
  val jsPlugin = kotlinPlugin.equals("js", true)
  fun execute(): BuildResult {
    val jsBlock = jsTargets.joinToString(";") { "${if (!jsPlugin) "js(\"$it\")" else "js"} {browser()}" }
    val jvmBlock = if (jsPlugin) {
      ""
    } else {
      jvmTargets.joinToString(";") { "jvm(\"$it\")" }
    }
    val kotlinBlock = if (kotlinPlugin.isEmpty()) "" else """
        kotlin{
        $jsBlock
        $jvmBlock
        }
    """.trimIndent()
    return File("build/functionalTest").gradleExec(
      buildGradleFile(kotlinPlugin, kotlinBlock) {
        val repos = repositories.joinToString("\n") {
          """
            repository("$it") {
              registry = uri("https://registry.$it.org")
              authToken = "asdhkjsdfjvhnsdrishdl"
              otp = "gfahsdjglknamsdkpjnmasdl"
            }
          """.trimIndent()
        }
        appendln(
          """
          kpmPublish {
            repositories {
              $repos
            }
          }
          """.trimIndent()
        )
      },
      "tasks",
      "--all",
      "--stacktrace"
    )
  }

  val result = execute()

  // Verify the result
  fun verifyRepos(pub: String, contains: Boolean) {
    repositories.forEach {
      if (contains) {
        result.output shouldContainIgnoringCase publishTaskName(pub, it)
      } else {
        result.output shouldNotContainIgnoringCase publishTaskName(pub, it)
      }
    }
  }
  jsTargets.forEach {
    val name = if (jsPlugin) "js" else it
    result.output shouldContainIgnoringCase assembleTaskName(name)
    verifyRepos(name, true)
  }
  jvmTargets.forEach {
    result.output shouldNotContainIgnoringCase assembleTaskName(it)
    verifyRepos(it, false)
  }
  expectedMissingTasks.forEach {
    result.output shouldNotContainIgnoringCase it
  }
}

class KpmPublishPluginFunctionalTest : WordSpec(
  {
    "Applying Plugin" should {
      "Create tasks for Kotlin/multiplatform given [single JS target]" {
        taskCreationTest(
          "multiplatform",
          jsTargets = listOf("js")
        )
      }

      "Not create tasks for Kotlin/multiplatform given [single JVM target]" {
        taskCreationTest(
          "multiplatform",
          jvmTargets = listOf("jvm"),
          expectedMissingTasks = listOf(
            assembleTaskName("js"),
            publishTaskName("js")
          )
        )
      }
      "Not create tasks for Kotlin/multiplatform given [multiple JS targets and single JVM target]" {
        taskCreationTest(
          "multiplatform",
          jsTargets = listOf("jsOne", "jsTwo"),
          jvmTargets = listOf("jvm"),
          expectedMissingTasks = listOf(
            assembleTaskName("js"),
            publishTaskName("js")
          )
        )
      }
      "Create tasks for Kotlin/JS given [default JS target]" {
        taskCreationTest(
          "js",
          jsTargets = listOf("jsOne")
        )
      }
      "Not create tasks for no kotlin plugin given [default JS target]" {
        taskCreationTest(
          "",
          expectedMissingTasks = listOf(
            assembleTaskName("js"),
            publishTaskName("js")
          )
        )
      }
    }

    "Running assembleKpmPublication" should {
      "succeed [JS]" {
        File("build/functionalTest").gradleExec(
          buildGradleFile(
            "js",
            """
      kotlin {
        js {browser()}
        dependencies {
          implementation(npm("axios", "*"))
          api(npm("snabbdom", "*"))
        }
      }
            """.trimIndent()
          ),
          assembleTaskName("js"),
          "--stacktrace"
        )
      }
      "succeed [MPP]" {
        File("build/functionalTest").gradleExec(
          buildGradleFile(
            "multiplatform",
            """
      kotlin {
        js {browser()}
        sourceSets {
          val jsMain by getting {            
            dependencies {
              implementation(npm("axios", "*"))
              api(npm("snabbdom", "*"))
            }
          }
        }
      }
            """.trimIndent()
          ),
          assembleTaskName("js"),
          "--stacktrace"
        )
      }
    }
    "Running publishKpmPublication [JS]" should {
      "succeed [JS]" {
        File("build/functionalTest").gradleExec(
          buildGradleFile(
            "js",
            """
      kotlin {
        js {browser()}
        dependencies {
          implementation(npm("axios", "*"))
          api(npm("snabbdom", "*"))
        }
      }
            """.trimIndent()
          ) {
            appendln(kpmPublishStub)
          },
          publishTaskName("js"),
          "--stacktrace",
          "-Pkpm.publish.dry=true"
        )
      }
      "succeed [MPP]" {
        File("build/functionalTest").gradleExec(
          buildGradleFile(
            "multiplatform",
            """
      kotlin {
        js("CustomJS") {browser()}
        sourceSets {
          val CustomJSMain by getting {            
            dependencies {
              implementation(npm("axios", "*"))
              api(npm("snabbdom", "*"))
            }
          }
        }
      }
            """.trimIndent()
          ) {
            appendln(kpmPublishStub)
          },
          publishTaskName("CustomJS"),
          "--stacktrace",
          "-Pkpm.publish.dry=true"
        )
      }
    }
  }
)
